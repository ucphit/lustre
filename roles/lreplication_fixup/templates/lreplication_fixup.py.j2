#!/bin/python3

import argparse, shared, socket, sys, time
from concurrent.futures import ThreadPoolExecutor

lists = {}
full_lists = {}

snapshot_file = "/var/log/last_snapshot.txt"

if shared.ldevInfo(f'{{ primary_mgs }}', )[0] == 1:
    primary_cluster = shared.ldevInfo(f'{{ primary_mgs }}', )[1:]
else:
    shared.log("LSNAPRETENTION", f"Error in retrieving ldev info")

if shared.ldevInfo(f'{{ secondary_mgs }}', )[0] == 1:
    secondary_cluster = shared.ldevInfo(f'{{ secondary_mgs }}', )[1:]
else:
    shared.log("LSNAPRETENTION", f"Error in retrieving ldev info")

def main():
    parser = argparse.ArgumentParser(description="Checkin snapshot alignment")
    parser.add_argument("-f", "--fixup", default="False", help="True or False")
    args = parser.parse_args()

    create_lists()
    intersection = find_intersection(lists)

    if args.fixup == 'False':
        for key, list in full_lists.items():
            for i in list:
                if i.split('@')[1] not in intersection:
                    shared.log("FIXUP", f"Require deleting {i} on {key.split('_')[0]}\n")

    if args.fixup == 'True':
        for key, list in full_lists.items():
            for i in list:
                if i.split('@')[1] not in intersection:
                    shared.log("FIXUP", f"Deleting {i} on {key.split('_')[0]}\n")
                    cmd = f"ssh {key.split('_')[0]} zfs destroy {i} >/dev/null 2>&1"
                    shared.run_command(cmd)

    create_lists()
    intersection = find_intersection(lists)
    rc = 0
    for cluster in (primary_cluster, secondary_cluster):
        for i in cluster:
            if set(lists[f'{i[0]}_{i[2]}']) != set(intersection):
                rc =  rc + 1
    shared.log("FIXUP", f"rc is {rc}")

    first_list = next(iter(lists.values()))

    if args.fixup == 'True' and rc == 0: 
        baseline = first_list[-1]
        shared.log("FIXUP", 'Here we go..')
        shared.stop_service('lsnapbackup.service')
        shared.stop_service('lreplication.service')
        shared.log("FIXUP", "Service is stopped")

        # Name of the new snapshot
        new_snapshot_name = f"snapshot_{int(time.time())}_remote"
        shared.log("FIXUP", f"Creating new snapshot: {new_snapshot_name}")

        # make new snapshot on all nodes
        for i in primary_cluster:
            shared.make_zfs_snapshot(i[0],i[2],new_snapshot_name)
            shared.log("FIXUP", "Incremental replication")

        with ThreadPoolExecutor() as executor:

            shared.log("FIXUP", f"Performing incremental replication from {baseline}")
            futures = [executor.submit(replicate, i, new_snapshot_name, baseline) for i in primary_cluster]
            for future in futures:
                future.result()

        shared.write_last_snapshot(snapshot_file,new_snapshot_name)

        shared.start_service('lreplication.service')

        shared.log("FIXUP", "Task completed. lreplication service started.") 
    else:
        shared.log("FIXUP", "Dry-run finished. Nothing touched!") 

def create_lists():
    global lists, full_lists
    for cluster in (primary_cluster, secondary_cluster):
        for i in cluster:
            lists[f'{i[0]}_{i[2]}'] = [item.split('@')[1] for item in shared.get_zfs_snapshots(i[0],i[2])[1:]]
            full_lists[f'{i[0]}_{i[2]}'] = [item for item in shared.get_zfs_snapshots(i[0],i[2])[1:]]

def replicate(i, new_snapshot_name, baseline):
    pairs = []
    for primary in primary_cluster:
        key = primary[2]
        secondary = next((s for s in secondary_cluster if s[2] == key), None)   
        if secondary is None:
            shared.log("SNAPREPLICATION", f"Error in compairing ldev's")
            raise ValueError(f"No match found for {primary}")
        pairs.append([primary[0],secondary[0]])

    backup_node = next((pair[1] for pair in pairs if pair[0] == i[0]), None)

    ssh_command = f'ssh {i[0]} "zfs send -R -I {i[2]}@{baseline} {i[2]}@{new_snapshot_name} | ssh {backup_node} zfs receive -F {i[2]}"'
    shared.log("FIXUP", f"Executing replication command: {ssh_command}")
    shared.run_command(ssh_command)

def find_intersection(lists_dict):
    if not lists_dict:
        return []
    all_values = (set(lst) for lst in lists_dict.values())
    intersection = set.intersection(*all_values)
    return list(intersection)

if __name__ == "__main__":
    main()

